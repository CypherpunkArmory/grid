---
- name: Provisioning
  hosts: all
  become: yes
  become_user: root
  become_method: sudo

  vars:
    # replace me with an EC2 autoscale lookup
    cluster_size: 1
    # replace me with an env lookup
    dd_api_key: DUMMY_KEY
    # eeeeeeehhhhh
    env: prod

  tasks:
   - name: Clear the mechanism
     apt:
       update_cache: yes

   - name: Set Default Local
     copy:
       dest: /etc/default/locale
       content: |
         LC_CTYPE="en_US.UTF-8"
         LC_ALL="en_US.UTF-8"
         LANG="en_US.UTF-8"

   - name: Disable unattended upgrades while we're ansibiling
     block:
       - command: systemctl disable apt-daily.service
       - command: systemctl disable apt-daily.timer

   - name: Configure and install APT Packages for Docker
     block:
     - name: Install KMOD
       apt:
         name: kmod
         state: present
         update_cache: yes

     - name: modprobe overlayfs
       modprobe:
         name: overlay
         state: present

     - name: modprobe iptables
       modprobe:
         name: ip_tables

     - name: start these modules on boot
       copy:
         dest: /etc/modules-load.d/docker-requirements.conf
         content: |
           overlay
           ip_tables

   - name: Install Unzip
     apt:
       name: unzip
       state: present
       update_cache: yes

   - name: Setup MOTD
     block:
     - name: Clear MOTD
       shell: /bin/rm /etc/update-motd.d/* warn=False

     - name: Copy Logo
       copy:
         src: templates/city.ansi
         dest: /etc/update-motd.d/city.ansi
         owner: root
         group: root
         mode: 0644

     - name: Set MOTD
       template:
         src: templates/motd.j2
         dest: /etc/update-motd.d/00-userland-city
         owner: root
         mode: 0755

     - name: Update MOTD
       shell: /bin/run-parts /etc/update-motd.d

   - name: Configure and Install Consul
     block:
       - name: Download CONSUL Binaries
         get_url:
           url: https://releases.hashicorp.com/consul/1.2.3/consul_1.2.3_linux_amd64.zip
           dest: /tmp/consul_1.2.3_linux_amd64.zip

       - name: Extract Binaries
         unarchive:
           src: /tmp/consul_1.2.3_linux_amd64.zip
           dest: /usr/bin
           remote_src: yes

       - name: Remove the download
         file:
           path: /tmp/consul_1.2.3_linux_amd64.zip
           state: absent

       - name: Create Consul User
         user:
           name: consul
           shell: /usr/sbin/nologin
           system: yes
           createhome: no

       - name: Create Consul Directory
         file:
           path: /var/lib/consul
           state: directory
           owner: consul
           group: consul
           mode: 0755

       - name: Upload SystemD Unit
         copy:
           src: templates/consul.service
           dest: /usr/lib/systemd/user/consul.service

       - name: Insert Consul in DNS Lookup
         copy:
           src: templates/resolved.conf
           dest: /etc/systemd/resolved.conf

       - name: Update HCL
         template:
           src: templates/consul.j2.hcl
           dest: /etc/consul.hcl
           owner: consul
           group: consul
           mode: 0644

       - name: Enable Consul Unit at Boot
         command: systemctl enable /usr/lib/systemd/user/consul.service

    # Currently we run Server and Client nodes on the same boxes in City but
    # this is probably not a long term solution - ultimately we'll need to separate them
    # out and have server boxes running on separate City nodes from workload executors
    #
    # When that day comes - move these "server" units out into their own ansible playbook
    #
    # The nomad servers in the City will _probably_ not be doing anything else
   - name: Configure and Install NOMAD
     block:
     - name: Download NOMAD Binaries
       get_url:
         url: https://releases.hashicorp.com/nomad/0.8.6/nomad_0.8.6_linux_amd64.zip
         dest: /tmp/nomad_0.8.6_linux_amd64.zip

     - name: Extract Binaries
       unarchive:
         src: /tmp/nomad_0.8.6_linux_amd64.zip
         dest: /usr/bin
         remote_src: yes

     - name: Remove Archive
       file:
         path: /tmp/nomad_0.8.6_linux_amd64.zip
         state: absent

     - name: Create Nomad User
       user:
         name: nomad
         shell: /usr/sbin/nologin
         system: yes
         createhome: no


     - name: Create Nomad Directory
       file:
         path: /var/lib/nomad
         state: directory
         owner: nomad
         group: nomad
         mode: 0755

     - name: Upload SystemD Unit
       copy:
         src: templates/nomad.service
         dest: /usr/lib/systemd/user/nomad.service

     - name: Update HCL
       template:
         src: templates/nomad.j2.hcl
         dest: /etc/nomad.hcl
         owner: nomad
         group: nomad
         mode: 0644

     - name: Enable Nomad Unit at Boot
       command: systemctl enable /usr/lib/systemd/user/nomad.service

   - name: Configure and Install Docker
     block:
     # Fix for https://github.com/docker/docker/issues/23347
     - name: Install dmsetup for Ubunutu 18.01
       apt:
         pkg: dmsetup
         state: present

     - name: Install AppArmor
       apt:
         pkg: apparmor
         state: present

     - name: Run DMSetup
       command: dmsetup mknodes

     - name: Download Docker CE .deb
       get_url:
         url: https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb
         dest: /tmp/docker-ce_18.06~ce~3-0~ubunutu_amd64.deb

     - name: Install Docker CE
       apt:
         deb: /tmp/docker-ce_18.06~ce~3-0~ubunutu_amd64.deb

     - name: Remove Docker .deb
       file:
         path: /tmp/docker-ce_18.06~ce~3-0~ubunutu_amd64.deb
         state: absent

     - name: Add the Docker User
       user:
         name: docker
         shell: /usr/sbin/nologin
         groups: docker
         system: yes
         createhome: no

     - name: Enable Docker Unit
       systemd:
         daemon_reload: yes
         enabled: yes
         name: docker


   - name: Configure and Install Datadog
     block:
       - name: Install apt-transport-https
         apt:
           pkg: apt-transport-https

       - name: Add Datadog deb repo
         lineinfile:
           dest: /etc/apt/sources.list
           line: deb https://apt.datadoghq.com/ stable 6

       - name: Install DD keys
         command: apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 382E94DE

       - name: Install DD agent
         apt:
           update_cache: yes
           pkg: datadog-agent
           state: present

       - name: Copy Config File
         template:
           src: templates/datadog.j2.yaml
           dest: /etc/datadog-agent/datadog.yaml
           owner: dd-agent
           mode: 0600

       - name: Attach dd-agent to docker
         user:
           name: dd-agent
           append: yes
           groups: docker

       - name: Enable Docker Agent
         template:
           src: templates/docker.j2.yaml
           dest: /etc/datadog-agent/conf.d/docker.d/conf.yaml
           owner: dd-agent
           mode: 0600

       - name: Create JournalD conf dir
         file:
           path: /etc/datadog-agent/conf.d/journald.d
           state: directory
           owner: dd-agent
           group: dd-agent
           mode: 0755

       - name: Enable JournalD log explorer
         template:
           src: templates/journald.j2.yaml
           dest: /etc/datadog-agent/conf.d/journald.d/conf.yaml
           owner: dd-agent
           group: dd-agent
           mode: 0644

       - name: Attach dd-agent to systemd-journald
         user:
           name: dd-agent
           append: yes
           groups: systemd-journal

       - name: Modify Consul Integration
         template:
           src: templates/consul.j2.yaml
           dest: /etc/datadog-agent/conf.d/consul.d/conf.yaml
           owner: dd-agent
           group: dd-agent
           mode: 0644

       - name: Enable DD Service at Boot
         command: systemctl enable datadog-agent

   - name: Clear Consul / Nomad / Docker Data
     block:
       - name: Clear Consul
         command: rm -rf /var/lib/consul/*

       - name: Clear Nomad
         command: rm -rf /var/lib/nomad/*

       - name: Clear Docker
         command: rm -rf /var/lib/docker/*

   - name: Use /dev/xvda as boot device because AWS
     command: sed -i 's/dev\/sda1/dev\/xvda1/g' /boot/extlinux/extlinux.conf warn=False

   - name: Remove the provision boot item
     command: sed -i '/^ LABEL provision$/Q' /boot/extlinux/extlinux.conf warn=False

   - name: Create regular login user
     block:
       - name: Create login user
         user:
           name: alan
           shell: /bin/bash
           groups:
             - adm
             - sudo

       - name: Ensure .ssh config directory
         file:
           path: /home/alan/.ssh
           recurse: yes
           owner: alan
           group: alan
           mode: 0700

       - name: Copy the provisioning key over
         authorized_key: user=alan key="{{item}}"
         with_file:
           - ../provision.pub

       - name: Add a sudoer file
         file:
           path: /etc/sudoers.d/00-login-user
           state: touch

       - name: Add the login user
         lineinfile:
           dest: /etc/sudoers.d/00-login-user
           state: present
           line: 'alan ALL=(ALL) NOPASSWD: ALL'

       - name: Copy Ubuntu's bashrc
         copy:
           src: /home/ubuntu/.bashrc
           dest: /home/alan/.bashrc
           owner: alan
           group: alan
           mode: 0644
           remote_src: true

       - name: Copy Ubuntu's profile
         copy:
           src: /home/ubuntu/.bashrc
           dest: /home/alan/.profile
           owner: alan
           group: alan
           mode: 0644
           remote_src: true

- name: Remove the Ubuntu User
  hosts: all
  remote_user: alan
  become: yes
  become_user: root
  become_method: sudo

  tasks:
    - name: Wait a tick!
      wait_for: timeout=2

    - name: No more Ubuntu User
      # this things fails sometimes, but appears to work anyway.
      ignore_errors: true
      command: userdel -fr ubuntu

    - name: Clean up the server
      block:
       - name: Empty the `/tmp`
         command: rm -rf /tmp/*

       - name: Rotate the log
         command: journalctl --rotate

       - name: Vacuum anything older than 1s
         command: journalctl --vacuum-time=1s

       - name: Kill the dmesg, etc
         command: find /var/log -type f -exec cp /dev/null {} \;

       - name: We don't need no stinkin' cloud-init
         command: cloud-init clean

       - name: Re-enable unattended upgrades
         block:
          - command: systemctl enable unattended-upgrades.service
          - command: systemctl enable apt-daily-upgrade.timer
          - command: systemctl enable apt-daily.timer
          - command: systemctl enable fstrim.timer
          - command: systemctl unmask systemd-tmpfiles-clean.timer

    - name: Graceful Shutdown
      command: bash -lc 'sleep 1 && systemctl halt'
      async: 30
      poll: 0
